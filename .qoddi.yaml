# Qoddi CI/CD Configuration for Ultra-Fast AI Model
# Version: 0.1.0
# Purpose: Automate containerized builds, CI/CD, and agentic task decomposition

name: ultra-fast-ai
version: 0.1.0
description: "Hyper-efficient AI model with SNN-SSM-Liquid NN architecture"

# =============================================================================
# Build Configuration
# =============================================================================
build:
  # Multi-language build environment
  runtime: multi-stage
  
  # Build matrix for cross-platform support
  matrix:
    rust_version: ["1.80", "1.81", "stable"]
    zig_version: ["0.13.0"]
    go_version: ["1.23"]
    platform: ["linux/amd64", "linux/arm64"]
    
  # Docker configuration
  docker:
    dockerfile: Dockerfile
    context: .
    target: final
    
  # Build stages
  stages:
    - name: rust-build
      commands:
        - cargo fmt --all -- --check
        - cargo clippy --all-targets --all-features -- -D warnings
        - cargo check --all-targets --all-features
        - cargo test --all --all-features
        - cargo build --release --bin ultra-fast-ai --bin train
        
    - name: zig-build
      commands:
        - zig fmt --check src/kernels/
        - zig build lib -Doptimize=ReleaseFast
        - zig test src/kernels/test.zig
        
    - name: go-build
      commands:
        - go fmt ./...
        - go vet ./...
        - go test -v ./...
        - go build -o mcp-server src/mcp/main.go
        
    - name: security-scan
      commands:
        - cargo audit --db /tmp/advisory-db
        - trivy fs . --severity HIGH,CRITICAL
        - gosec ./src/mcp/...

# =============================================================================
# Agentic Workflows
# =============================================================================
agents:
  # Code generation agent
  code-agent:
    type: code-generator
    specialization: rust-zig-go
    max_task_size: 50  # lines of code
    parallel_execution: true
    
    triggers:
      - on: push
        paths: ["src/**/*.rs", "src/**/*.zig", "src/**/*.go"]
      - on: pull_request
        paths: ["src/**"]
        
    tasks:
      - name: code-review
        agent: code-agent
        max_time: "10m"
        commands:
          - cargo clippy --all-targets -- -D warnings
          - zig fmt --check src/kernels/
          - go vet ./src/mcp/...
          
      - name: unit-test-generation
        agent: code-agent
        max_time: "15m"
        commands:
          - cargo test --all
          - zig test src/kernels/test.zig
          - go test -v ./src/mcp/...

  # Performance optimization agent
  perf-agent:
    type: performance-optimizer
    specialization: neural-networks
    max_task_size: 100  # lines of code
    
    triggers:
      - on: push
        paths: ["src/model/**", "src/training/**"]
      - schedule: "0 2 * * *"  # Daily at 2 AM
        
    tasks:
      - name: benchmark
        agent: perf-agent
        max_time: "30m"
        commands:
          - cargo bench --bench inference_bench
          - cargo bench --bench energy_bench
          - python scripts/performance_analysis.py
          
      - name: profiling
        agent: perf-agent
        max_time: "20m"
        commands:
          - cargo build --profile profiling
          - perf record ./target/profiling/ultra-fast-ai
          - perf report --stdio

  # Testing agent
  test-agent:
    type: test-generator
    specialization: comprehensive-testing
    coverage_target: 100
    mutation_score_target: 80
    
    triggers:
      - on: push
      - on: pull_request
        
    tasks:
      - name: unit-tests
        agent: test-agent
        max_time: "20m"
        parallel: true
        commands:
          - cargo test --all --all-features
          - cargo tarpaulin --out xml --output-dir coverage/
          - zig test src/kernels/test.zig
          - go test -coverprofile=coverage.out ./...
          
      - name: mutation-tests
        agent: test-agent
        max_time: "45m"
        commands:
          - cargo mutants --timeout 300
          - go test -mutate ./src/mcp/...
          
      - name: integration-tests
        agent: test-agent
        max_time: "60m"
        commands:
          - docker-compose -f docker-compose.test.yml up --abort-on-container-exit
          - python scripts/integration_tests.py

  # Security agent
  security-agent:
    type: security-scanner
    specialization: vulnerability-detection
    
    triggers:
      - on: push
      - schedule: "0 4 * * 1"  # Weekly on Monday at 4 AM
        
    tasks:
      - name: dependency-audit
        agent: security-agent
        max_time: "10m"
        commands:
          - cargo audit
          - go mod audit
          - npm audit --audit-level high
          
      - name: code-security
        agent: security-agent
        max_time: "15m"
        commands:
          - cargo clippy -- -W clippy::all
          - gosec ./src/mcp/...
          - bandit -r scripts/
          
      - name: container-security
        agent: security-agent
        max_time: "20m"
        commands:
          - trivy image ultra-fast-ai:latest
          - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ultra-fast-ai:latest

# =============================================================================
# Deployment Configuration
# =============================================================================
deploy:
  # Staging environment
  staging:
    environment: staging
    branch: develop
    
    pre_deploy:
      - cargo build --release
      - docker build -t ultra-fast-ai:staging .
      - docker-compose -f docker-compose.staging.yml up -d --wait
      
    deploy:
      - docker tag ultra-fast-ai:staging registry.qoddi.com/ultra-fast-ai:staging
      - docker push registry.qoddi.com/ultra-fast-ai:staging
      
    post_deploy:
      - curl -f http://staging.ultra-fast-ai.qoddi.app/health
      - python scripts/staging_tests.py
      
    rollback:
      - docker-compose -f docker-compose.staging.yml down
      - docker-compose -f docker-compose.staging.yml up -d --wait
      
  # Production environment
  production:
    environment: production
    branch: main
    
    pre_deploy:
      - cargo build --release --all-features
      - cargo test --release --all
      - docker build -t ultra-fast-ai:production .
      
    deploy:
      - docker tag ultra-fast-ai:production registry.qoddi.com/ultra-fast-ai:latest
      - docker push registry.qoddi.com/ultra-fast-ai:latest
      
    post_deploy:
      - curl -f http://ultra-fast-ai.qoddi.app/health
      - python scripts/production_smoke_tests.py
      
    health_checks:
      - endpoint: "/health"
        timeout: 30s
        retries: 3
      - endpoint: "/metrics"
        timeout: 10s
        retries: 2

# =============================================================================
# Quality Gates
# =============================================================================
quality:
  # Code quality requirements
  code:
    rust:
      fmt_check: true
      clippy_warnings: 0
      test_coverage: 100
      mutation_score: 80
      
    zig:
      fmt_check: true
      compile_warnings: 0
      test_coverage: 100
      
    go:
      fmt_check: true
      vet_warnings: 0
      test_coverage: 95
      
  # Performance requirements
  performance:
    inference_latency_ms: 100
    power_consumption_w: 50
    training_time_hours: 24
    memory_usage_gb: 8
    
  # Security requirements
  security:
    vulnerability_score: 0
    dependency_audit: pass
    container_scan: pass
    
  # Model requirements
  model:
    parameter_count_max: 100_000_000
    accuracy_humaneval: 0.95
    accuracy_gsm8k: 0.90
    hallucination_rate_max: 0.01

# =============================================================================
# Monitoring and Alerting
# =============================================================================
monitoring:
  # Metrics collection
  metrics:
    - name: inference_latency
      type: histogram
      buckets: [10, 50, 100, 200, 500, 1000]
      
    - name: power_consumption
      type: gauge
      alert_threshold: 60
      
    - name: accuracy_score
      type: gauge
      alert_threshold: 0.90
      
    - name: error_rate
      type: counter
      alert_threshold: 0.02
      
  # Alerting channels
  alerts:
    slack:
      webhook: "${SLACK_WEBHOOK_URL}"
      channel: "#ultra-fast-ai-alerts"
      
    email:
      recipients: ["team@ultra-fast-ai.com"]
      
    pagerduty:
      integration_key: "${PAGERDUTY_INTEGRATION_KEY}"

# =============================================================================
# Task Decomposition Rules
# =============================================================================
task_decomposition:
  # Automatic task breakdown
  triggers:
    - task_size_lines: 50
    - task_complexity: high
    - estimated_time: "1h"
    
  # Decomposition strategy
  strategy:
    max_subtask_size: 50  # lines of code
    max_subtask_time: "1h"
    parallel_execution: true
    
  # Task types
  task_types:
    - name: code-implementation
      agent: code-agent
      max_size: 50
      
    - name: test-generation
      agent: test-agent
      max_size: 100
      
    - name: performance-optimization
      agent: perf-agent
      max_size: 30
      
    - name: documentation
      agent: doc-agent
      max_size: 200

# =============================================================================
# Environment Variables
# =============================================================================
env:
  # Build environment
  RUST_LOG: info
  CARGO_TARGET_DIR: target
  ZIG_CACHE_DIR: zig-cache
  
  # Performance constraints
  MAX_PARAMETERS: 100000000
  MAX_INFERENCE_MS: 100
  MAX_POWER_W: 50
  MAX_TRAINING_HOURS: 24
  MAX_VRAM_GB: 8
  
  # MCP configuration
  MCP_API_SERVER: "http://mcp-api:8001"
  MCP_TOOLS_SERVER: "http://mcp-tools:8002"
  MCP_DATA_SERVER: "http://mcp-data:8003"
  MCP_FEEDBACK_SERVER: "http://mcp-feedback:8004"
  
  # Secrets (from Qoddi vault)
  secrets:
    - GITHUB_TOKEN
    - SLACK_WEBHOOK_URL
    - PAGERDUTY_INTEGRATION_KEY
    - REGISTRY_PASSWORD

# =============================================================================
# Cache Configuration
# =============================================================================
cache:
  # Build cache
  build:
    rust: "target/"
    zig: "zig-cache/"
    go: "go-cache/"
    
  # Dependency cache
  dependencies:
    rust: "~/.cargo/"
    zig: "~/.cache/zig/"
    go: "~/go/pkg/mod/"
    
  # MCP cache
  mcp:
    path: ".cache/mcp/"
    ttl: "24h"
    max_size: "1GB"

# =============================================================================
# Notifications
# =============================================================================
notifications:
  # Success notifications
  on_success:
    - type: slack
      message: "✅ Ultra-Fast AI deployment successful"
      
  # Failure notifications
  on_failure:
    - type: slack
      message: "❌ Ultra-Fast AI deployment failed"
    - type: email
      subject: "Deployment Failure Alert"
      
  # Performance alerts
  on_performance_degradation:
    - type: pagerduty
      severity: warning
    - type: slack
      message: "⚠️ Performance degradation detected"

# =============================================================================
# Agentic Context Management
# =============================================================================
context:
  # Context persistence
  persistence:
    enabled: true
    storage: "qoddi-context-db"
    retention: "30d"
    
  # Context pruning
  pruning:
    enabled: true
    strategy: "relevance-based"
    max_context_size: "10MB"
    
  # Context sharing between agents
  sharing:
    enabled: true
    scope: "project-wide"
    access_control: "role-based"