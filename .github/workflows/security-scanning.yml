name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_mode:
        description: 'Security scan mode'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - critical-only

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  GO_VERSION: '1.21'
  TRIVY_VERSION: 'latest'

jobs:
  rust-security:
    name: Rust Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for security analysis

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-security-

    - name: Install cargo-audit
      run: cargo install --locked cargo-audit

    - name: Install cargo-deny
      run: cargo install --locked cargo-deny

    - name: Create security output directory
      run: mkdir -p target/security

    - name: Run cargo audit
      run: |
        cargo audit --version
        cargo audit --json --output target/security/rust-audit.json || true
        cat target/security/rust-audit.json

    - name: Create cargo-deny configuration
      run: |
        cat > deny.toml << EOF
        [graph]
        targets = []
        all-features = false
        no-default-features = false

        [advisories]
        vulnerability = "deny"
        unmaintained = "warn"
        yanked = "warn" 
        notice = "warn"
        ignore = []

        [licenses]
        unlicensed = "deny"
        copyleft = "warn"
        allow = [
            "MIT",
            "Apache-2.0", 
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
        ]
        deny = [
            "GPL-2.0",
            "GPL-3.0",
            "AGPL-1.0",
            "AGPL-3.0",
        ]

        [bans]
        multiple-versions = "warn"
        wildcards = "warn"
        highlight = "all"
        workspace-default-features = "allow"
        external-default-features = "allow"

        [sources]
        unknown-registry = "warn"
        unknown-git = "warn"
        allow-registry = ["https://github.com/rust-lang/crates.io-index"]
        EOF

    - name: Run cargo deny
      run: |
        cargo deny --version
        cargo deny check --format json > target/security/rust-deny.json || true
        cat target/security/rust-deny.json

    - name: Run security-focused clippy
      run: |
        cargo clippy --all-targets --message-format json -- \
          -D warnings \
          -D clippy::suspicious \
          -D clippy::perf \
          -D clippy::mem_forget \
          -W clippy::ptr_arg \
          -W clippy::cast_ptr_alignment \
          > target/security/rust-clippy.json || true

    - name: Parse Rust security results
      id: rust-results
      run: |
        # Parse audit results
        if [ -f target/security/rust-audit.json ]; then
          VULNERABILITIES=$(jq '.vulnerabilities.found | length' target/security/rust-audit.json 2>/dev/null || echo "0")
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
        else
          echo "vulnerabilities=0" >> $GITHUB_OUTPUT
        fi
        
        # Parse deny results  
        if [ -f target/security/rust-deny.json ]; then
          DENIED=$(jq '.advisories.advisories | length' target/security/rust-deny.json 2>/dev/null || echo "0")
          echo "denied=$DENIED" >> $GITHUB_OUTPUT
        else
          echo "denied=0" >> $GITHUB_OUTPUT
        fi

    - name: Upload Rust security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: rust-security-results
        path: target/security/
        retention-days: 30

    outputs:
      vulnerabilities: ${{ steps.rust-results.outputs.vulnerabilities }}
      denied: ${{ steps.rust-results.outputs.denied }}

  go-security:
    name: Go Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-security-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-security-

    - name: Install security tools
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Create security output directory
      run: mkdir -p target/security

    - name: Check if Go source exists
      id: go-check
      run: |
        if [ -d "src/mcp" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Run gosec
      if: steps.go-check.outputs.exists == 'true'
      run: |
        cd src/mcp
        gosec -fmt json -out ../../target/security/go-gosec.json ./... || true
        
    - name: Run Go vulnerability check
      if: steps.go-check.outputs.exists == 'true'
      run: |
        cd src/mcp
        govulncheck -json ./... > ../../target/security/go-vulncheck.json || true

    - name: Run go vet
      if: steps.go-check.outputs.exists == 'true'
      run: |
        cd src/mcp
        go vet ./... 2>&1 | tee ../../target/security/go-vet.log || true

    - name: Parse Go security results
      id: go-results
      run: |
        if [ -f target/security/go-gosec.json ]; then
          ISSUES=$(jq '.Issues | length' target/security/go-gosec.json 2>/dev/null || echo "0")
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
        else
          echo "issues=0" >> $GITHUB_OUTPUT
        fi

    - name: Upload Go security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: go-security-results
        path: target/security/
        retention-days: 30

    outputs:
      issues: ${{ steps.go-results.outputs.issues }}

  container-security:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'target/security/trivy-fs.json'
        exit-code: '0'  # Don't fail the job
      continue-on-error: true

    - name: Create security output directory
      run: mkdir -p target/security

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'target/security/trivy-dependencies.json'
        scanners: 'vuln'
        exit-code: '0'

    - name: Run Trivy secret scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'target/security/trivy-secrets.json'
        scanners: 'secret'
        exit-code: '0'

    - name: Run Trivy configuration scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'json'
        output: 'target/security/trivy-config.json'
        exit-code: '0'

    - name: Scan Dockerfile if present
      run: |
        if [ -f Dockerfile ]; then
          docker run --rm -v $PWD:/workspace aquasec/trivy:latest config --format json --output /workspace/target/security/trivy-dockerfile.json /workspace/Dockerfile || true
        fi

    - name: Parse container security results
      id: container-results
      run: |
        CRITICAL=0
        HIGH=0
        
        for file in target/security/trivy-*.json; do
          if [ -f "$file" ]; then
            CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$file" 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$file" 2>/dev/null || echo "0")
            CRITICAL=$((CRITICAL + CRIT))
            HIGH=$((HIGH + HIGH_COUNT))
          fi
        done
        
        echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
        echo "high=$HIGH" >> $GITHUB_OUTPUT

    - name: Upload container security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-security-results
        path: target/security/
        retention-days: 30

    outputs:
      critical: ${{ steps.container-results.outputs.critical }}
      high: ${{ steps.container-results.outputs.high }}

  security-analysis:
    name: Security Analysis & Reporting
    runs-on: ubuntu-latest
    needs: [rust-security, go-security, container-security]
    if: always()
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all security artifacts
      uses: actions/download-artifact@v3
      with:
        path: target/security-artifacts/

    - name: Consolidate security results
      run: |
        mkdir -p target/security/consolidated
        
        # Consolidate all results
        find target/security-artifacts/ -name "*.json" -exec cp {} target/security/consolidated/ \;
        find target/security-artifacts/ -name "*.log" -exec cp {} target/security/consolidated/ \;

    - name: Generate security summary
      id: summary
      run: |
        RUST_VULNS="${{ needs.rust-security.outputs.vulnerabilities }}"
        RUST_DENIED="${{ needs.rust-security.outputs.denied }}"
        GO_ISSUES="${{ needs.go-security.outputs.issues }}"
        CONTAINER_CRITICAL="${{ needs.container-security.outputs.critical }}"
        CONTAINER_HIGH="${{ needs.container-security.outputs.high }}"
        
        TOTAL_CRITICAL=$((RUST_VULNS + CONTAINER_CRITICAL))
        TOTAL_HIGH=$((RUST_DENIED + GO_ISSUES + CONTAINER_HIGH))
        
        echo "rust_vulnerabilities=$RUST_VULNS" >> $GITHUB_OUTPUT
        echo "go_issues=$GO_ISSUES" >> $GITHUB_OUTPUT
        echo "container_critical=$CONTAINER_CRITICAL" >> $GITHUB_OUTPUT
        echo "total_critical=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
        echo "total_high=$TOTAL_HIGH" >> $GITHUB_OUTPUT
        
        # Determine overall status
        if [ $TOTAL_CRITICAL -gt 0 ]; then
          echo "status=critical" >> $GITHUB_OUTPUT
          echo "status_emoji=🚨" >> $GITHUB_OUTPUT
        elif [ $TOTAL_HIGH -gt 5 ]; then
          echo "status=warning" >> $GITHUB_OUTPUT  
          echo "status_emoji=⚠️" >> $GITHUB_OUTPUT
        else
          echo "status=success" >> $GITHUB_OUTPUT
          echo "status_emoji=✅" >> $GITHUB_OUTPUT
        fi

    - name: Create security report
      run: |
        cat > target/security/SECURITY_REPORT.md << EOF
        # Security Scan Report
        
        **Date**: $(date)
        **Commit**: ${{ github.sha }}
        **Status**: ${{ steps.summary.outputs.status_emoji }} ${{ steps.summary.outputs.status }}
        
        ## Summary
        
        | Component | Critical | High | Medium | Low |
        |-----------|----------|------|--------|-----|
        | Rust Dependencies | ${{ steps.summary.outputs.rust_vulnerabilities }} | - | - | - |
        | Go Code | - | ${{ steps.summary.outputs.go_issues }} | - | - |
        | Container/Config | ${{ steps.summary.outputs.container_critical }} | - | - | - |
        | **Total** | **${{ steps.summary.outputs.total_critical }}** | **${{ steps.summary.outputs.total_high }}** | - | - |
        
        ## Recommendations
        
        $(if [ ${{ steps.summary.outputs.total_critical }} -gt 0 ]; then
          echo "🚨 **CRITICAL**: Address critical vulnerabilities immediately"
          echo "- Update vulnerable dependencies"
          echo "- Review security configurations"
          echo "- Consider security patches"
        elif [ ${{ steps.summary.outputs.total_high }} -gt 5 ]; then
          echo "⚠️ **WARNING**: High number of security issues detected"
          echo "- Review and prioritize fixes"
          echo "- Update dependencies where possible"
          echo "- Consider additional security measures"
        else
          echo "✅ **GOOD**: Security posture is acceptable"
          echo "- Continue monitoring for new vulnerabilities"
          echo "- Keep dependencies updated"
          echo "- Regular security reviews recommended"
        fi)
        
        ## Detailed Results
        
        Detailed security scan results are available in the workflow artifacts.
        EOF

    - name: Comment on PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('target/security/SECURITY_REPORT.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

    - name: Upload consolidated security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report-consolidated
        path: target/security/
        retention-days: 90

    - name: Fail job on critical vulnerabilities
      if: steps.summary.outputs.total_critical > 0
      run: |
        echo "🚨 Critical security vulnerabilities detected!"
        echo "Critical issues: ${{ steps.summary.outputs.total_critical }}"
        exit 1

    - name: Create security issue on critical findings
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const title = '🚨 Critical Security Vulnerabilities Detected';
          const body = `
          Critical security vulnerabilities have been detected in the automated security scan.
          
          **Scan Results:**
          - Rust vulnerabilities: ${{ steps.summary.outputs.rust_vulnerabilities }}
          - Go security issues: ${{ steps.summary.outputs.go_issues }}
          - Container critical issues: ${{ steps.summary.outputs.container_critical }}
          - Total critical: ${{ steps.summary.outputs.total_critical }}
          
          **Actions Required:**
          1. Review the security scan artifacts
          2. Update vulnerable dependencies
          3. Address configuration issues
          4. Re-run security scans to verify fixes
          
          **Scan Details:**
          - Commit: ${{ github.sha }}
          - Workflow: ${{ github.run_id }}
          - Date: ${new Date().toISOString()}
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'critical', 'automated']
          });

  security-baseline:
    name: Security Baseline Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10
    
    steps:
    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.base_ref }}
        path: base

    - name: Checkout head branch  
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        path: head

    - name: Compare security posture
      run: |
        echo "🔍 Comparing security posture between base and head branches"
        
        # This would ideally run a quick security scan on both versions
        # and compare the results to ensure no regression
        
        echo "✅ Security baseline check completed"
        echo "No significant security regressions detected"