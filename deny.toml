# Cargo Deny Configuration for Ultra-Fast AI Model
# Enforces security, licensing, and dependency policies

# The graph table configures how the dependency graph is constructed
[graph]
# If 1 or more target triples are specified, only the dependencies for those
# targets will be included in the graph. This can be used to filter out
# dependencies that are only used for development or testing.
targets = []

# This section is considered when running `cargo deny check advisories`
# More documentation for the advisories section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html
[advisories]
# The path where the advisory database is cloned/fetched into
db-path = ".cache/advisory-db"
# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for security vulnerabilities
vulnerability = "deny"
# The lint level for unmaintained crates
unmaintained = "warn"
# The lint level for crates that have been yanked from their source registry
yanked = "warn"
# The lint level for crates with security notices. Note that as of
# 2019-12-17 there are no security notice advisories in
# https://github.com/rustsec/advisory-db
notice = "warn"
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
    # Example: Ignore a specific advisory
    # "RUSTSEC-2020-0001",
]
# Threshold for security vulnerabilities, any vulnerability with a CVSS score
# lower than this value will be ignored. Note that ignored advisories will still
# output a note when they are encountered.
# severity-threshold = 

# This section is considered when running `cargo deny check licenses`
# More documentation for the licenses section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html
[licenses]
# The lint level for crates which do not have a detectable license
unlicensed = "deny"
# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.11 short identifier (+ optional exception)].
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
    "CC0-1.0",
    "0BSD",
    "Zlib",
    "Unlicense",
]
# List of explicitly disallowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.11 short identifier (+ optional exception)].
deny = [
    "GPL-2.0",
    "GPL-3.0",
    "LGPL-2.0",
    "LGPL-2.1", 
    "LGPL-3.0",
    "AGPL-1.0",
    "AGPL-3.0",
    "EUPL-1.0",
    "EUPL-1.1",
    "EUPL-1.2",
    "CECILL-2.0",
    "CECILL-2.1",
    "CECILL-B",
    "CECILL-C",
    "CPAL-1.0",
    "EPL-1.0",
    "EPL-2.0",
    "EUPL-1.0",
    "EUPL-1.1",
    "EUPL-1.2",
    "LPPL-1.0",
    "LPPL-1.1",
    "LPPL-1.2",
    "LPPL-1.3a",
    "LPPL-1.3c",
    "MPL-1.0",
    "MPL-1.1",
    "MPL-2.0",
    "MS-PL",
    "MS-RL",
    "NCSA",
    "OFL-1.0",
    "OFL-1.1",
    "OLDAP-2.8",
    "OPENSSL",
    "OSL-1.0",
    "OSL-1.1",
    "OSL-2.0",
    "OSL-2.1",
    "OSL-3.0",
    "PHP-3.0",
    "PHP-3.01",
    "PostgreSQL",
    "Python-2.0",
    "QPL-1.0",
    "Sleepycat",
    "SISSL",
    "SPL-1.0",
    "Watcom-1.0",
    "W3C",
    "WTFPL",
    "X11",
    "XFree86-1.1",
    "YPL-1.0",
    "YPL-1.1",
    "Zimbra-1.3",
    "Zimbra-1.4",
    "Zend-2.0",
]
# Lint level for when multiple versions of the same license are detected
copyleft = "warn"
# Confidence threshold for detecting a license from a license text.
# Confidence is a value between 0.0 and 1.0, and is the percentage of the text
# that was successfully matched with a license.
confidence-threshold = 0.8
# Allow 1 or more licenses on a per-crate basis, so that particular licenses
# aren't accepted for every possible crate as with the normal allow list
exceptions = [
    # Each entry is the crate and version constraint, and its the identity of
    # the person or organization that authored the crate. See
    # https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
    # for crate version constraint syntax.
    # { allow = ["Zlib"], name = "adler32", version = "*" },
]

# Some crates don't have (easily) machine readable licensing information,
# adding a clarification or license text here will make the tooling treat
# those crates as having the specified license(s)
[[licenses.clarify]]
# The name of the crate the clarification applies to
name = "ring"
# The optional version constraint for the crate
# version = "0.16"
# The SPDX expression for the license requirements of the crate
expression = "MIT AND ISC AND OpenSSL"
# One or more files in the crate's source used as the "source of truth" for
# the license expression. If the files are missing, or do not match the
# expression, the clarification will fail
license-files = [
    { path = "LICENSE", hash = 0xbd0eed23 }
]

# This section is considered when running `cargo deny check bans`.
# More documentation about the 'bans' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html
[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "warn"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
# * lowest-version - The path to the lowest versioned duplicate is highlighted
# * simplest-path - The path to the version with the fewest edges is highlighted
# * all - Both lowest-version and simplest-path are used
highlight = "all"
# The default lint level for `default-features` for a crate, this can be
# overridden on a per-crate basis
workspace-default-features = "allow"
# The default lint level for `features` for a crate, this can be
# overridden on a per-crate basis. 
external-default-features = "allow"
# List of crates that are allowed. Use with care!
allow = [
    # { name = "openssl", version = "=0.10.44" },
]
# List of crates to deny
deny = [
    # Each entry the name of a crate and a version range. If version is
    # not specified, all versions will be matched.
    # { name = "ansi_term", version = "=0.11.0" },
    
    # Security-problematic crates
    { name = "openssl", version = "*" },  # Use rustls instead
    { name = "native-tls" },              # Use rustls instead
    
    # Potentially unsafe crates that should be avoided
    { name = "memchr", version = "<2.0" },
    { name = "regex", version = "<1.5" },
    
    # Deprecated or unmaintained crates
    { name = "term", version = "*" },
    { name = "tempdir", version = "*" },  # Use tempfile instead
    
    # Crates with known security issues (examples)
    # { name = "time", version = "<0.2.23" },
]
# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
    # { name = "ansi_term", version = "=0.11.0" },
]
# Similarly to `skip` allows you to skip certain crates from being checked. Unlike
# `skip`, a tree-skipped crate is also skipped for all of its dependencies.
skip-tree = [
    # { name = "ansi_term", version = "=0.11.0" },
]

# This section is considered when running `cargo deny check sources`.
# More documentation about the 'sources' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html
[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "warn"
# List of URLs for allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of URLs for allowed Git repositories
allow-git = [
    # Examples of allowing specific Git repositories
    # "https://github.com/rust-lang/cargo",
    # "https://github.com/Byron/gitoxide",
]

# This section defines which crates can use particular cfg expressions
[targets]
# Enable OS-specific dependencies
targets = [
    { triple = "x86_64-unknown-linux-gnu" },
    { triple = "x86_64-pc-windows-msvc" },
    { triple = "x86_64-apple-darwin" },
    { triple = "aarch64-unknown-linux-gnu" },
    { triple = "aarch64-apple-darwin" },
]